// Classes

ClassList -> Class ClassList | eps

Class -> 'class' identifier '{' MemberList '}'

MemberList -> Member MemberList | eps

Member -> Type identifier Definition
        | 'void' identifier MethodDefinition
        | Constructor

Constructor -> identifier MethodDefinition

Definition -> VariableDefinition ';' | MethodDefinition

VariableDefinition -> '=' Expression | eps

MethodDefinition -> '(' ParameterList ')' Block

ParameterList -> Parameter ParameterOneList | eps

ParameterOneList -> ',' Parameter ParameterOneList | eps

Parameter -> Type identifier

// Blocks

Block -> '{' BlockStatementList '}'

BlockStatements -> BlockStatement BlockStatements | eps

BlockStatement -> LocalVariableDeclaration ';' | Statement

LocalVariableDeclaration -> Type identifier VariableDefinition

// Statements

Statement -> Block
           | IfStatement
           | WhileStatement
           | ForStatement
           | 'break' ';'
           | 'continue' ';'
           | Expression ';'

IfStatement -> 'if' ParExpression Statement ElseStatement

ElseStatement -> 'else' Statement | eps

WhileStatement -> 'while' ParExpression Statement

ParExpression -> '(' Expression ')'

ForStatement -> 'for' '(' ForInit ';' Expression ';' ExpressionList ')' Statement

ForInit -> LocalVariableDeclaration | ExpressionList

// Expressions

Expression -> AssignmentExpression

AssignmentExpression -> OrExpression
                      | UnaryExpression '=' AssignmentExpression

OrExpression -> AndExpression OrExpression'
OrExpression' -> '||' AndExpression OrExpression' | eps

AndExpression -> EqualityExpression AndExpression'
AndExpression' -> '&&' EqualityExpression AndExpression' | eps

EqualityExpression -> RelationalExpression EqualityExpression'
EqualityExpression' -> EqualityOperator RelationalExpression EqualityExpression' | eps
EqualityOpeator -> '==' | '!='

RelationalExpression -> AdditiveExpression RelationalExpression'
RelationalExpression' -> RelationalOperator AdditiveExpression RelationalExpression' | eps
RelationalOperator -> '<' | '>' | '<=' | '>='

AdditiveExpression -> MultiplicativeExpression AdditiveExpression'
AdditiveExpression' -> AdditiveOperator MultiplicativeExpression AdditiveExpression' | eps
AdditiveOperator -> '+' | '-'

MultiplicativeExpression -> UnaryExpression MultiplicativeExpression'
MultiplicativeExpression' -> MultiplicativeOperator UnaryExpression MultiplicativeExpression' | eps
MultiplicativeOperator -> '*' | '/' | '%'

UnaryExpression -> PostfixExpression
                 | PrefixOperator PostfixExpression
PrefixOperator -> '+' | '-' | '!' | IncDecOperator

PostfixExpression -> PrimaryExpression PostfixExpression'
PostfixExpression' -> PostfixOperator PostfixExpression' | eps
PostfixOperator -> '(' ExpressionList ')' | '.' identifier | IncDecOperator

ExressionList -> Expression ExpressionOneList | eps
ExpressionOneList -> ',' Expression ExpressionOneList | eps

PrimaryExpression -> identifier
                   | literal
                   | SpecialName
                   | ParExpression
                   | 'new' QualifiedName '(' ExpressionList ')'

IncDecOperator -> '++' | '--'

Type -> PrimaryType
      | QualifiedName

QualifiedName -> identifier

PrimaryType -> 'boolean'
             | 'byte'
             | 'short'
             | 'int'
             | 'long'
             | 'float'
             | 'double'

SpecialName -> 'this' | 'null'
