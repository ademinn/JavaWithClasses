// Classes

ClassList -> Class ClassList | eps

Class -> 'class' identifier '{' MemberList '}'

MemberList -> Member MemberList | eps

Member -> VariableDeclaration
        | MethodDeclaration

VariableDeclaration -> Type identifier ';' | Type identifier '=' Expression ';'

MethodDeclaration -> MaybeType identifier '(' ParameterList ')' Block
MaybeType -> Type | 'void' | eps

ParameterList -> Parameter ParameterOneList | eps

ParameterOneList -> ',' Parameter ParameterOneList | eps

Parameter -> Type identifier

// Blocks

Block -> '{' BlockStatementList '}'

BlockStatements -> BlockStatement BlockStatements | eps

BlockStatement -> VariableDeclaration | Statement

// Statements

Statement -> Block
           | IfStatement
           | WhileStatement
           | ForStatement
           | ReturnStatement
           | 'break' ';'
           | 'continue' ';'
           | Expression ';'

IfStatement -> 'if' ParExpression Statement ElseStatement

ElseStatement -> 'else' Statement | eps

WhileStatement -> 'while' ParExpression Statement

ParExpression -> '(' Expression ')'

ForStatement -> 'for' '(' ForInit ForExpression ForIncrement ')' Statement

ForInit -> VariableDeclaration | ExpressionList ';'

ForExpression -> Expression ';'

ForIncrement -> ExpressionList

ReturnStatement -> Return Expression ';' | Return ';'

// Expressions

Expression -> AssignmentExpression

AssignmentExpression -> OrExpression
                      | QualifiedName '=' AssignmentExpression

OrExpression -> AndExpression OrExpression'
OrExpression' -> '||' AndExpression OrExpression' | eps

AndExpression -> EqualityExpression AndExpression'
AndExpression' -> '&&' EqualityExpression AndExpression' | eps

EqualityExpression -> RelationalExpression EqualityExpression'
EqualityExpression' -> EqualityOperator RelationalExpression EqualityExpression' | eps
EqualityOpeator -> '==' | '!='

RelationalExpression -> AdditiveExpression RelationalExpression'
RelationalExpression' -> RelationalOperator AdditiveExpression RelationalExpression' | eps
RelationalOperator -> '<' | '>' | '<=' | '>='

AdditiveExpression -> MultiplicativeExpression AdditiveExpression'
AdditiveExpression' -> AdditiveOperator MultiplicativeExpression AdditiveExpression' | eps
AdditiveOperator -> '+' | '-'

MultiplicativeExpression -> UnaryExpression MultiplicativeExpression'
MultiplicativeExpression' -> MultiplicativeOperator UnaryExpression MultiplicativeExpression' | eps
MultiplicativeOperator -> '*' | '/' | '%'

UnaryExpression -> PostfixExpression
                 | PrefixOperator PostfixExpression
PrefixOperator -> '+' | '-' | '!' | IncDecOperator

PostfixExpression -> PrimaryExpression | QualifiedName IncDecOperator

ExressionList -> Expression ExpressionOneList | eps
ExpressionOneList -> ',' Expression ExpressionOneList | eps

PrimaryExpression -> literal
                   | 'null'
                   | ParExpression
                   | QualifiedName

ObjectAccess -> 'this'
              | 'new' ObjectType '(' ExpressionList ')'
              | identifier '(' ExpressionList ')'
              | identifier

QualifiedName -> ObjectAccess QualifiedName'
QualifiedName' -> '.' identifier QualifiedName'
                | '.' identifier '(' ExpressionList ')' QualifiedName'
                | eps

Return -> 'return'

Type -> PrimaryType
      | ObjectType

ObjectType -> identifier

PrimaryType -> 'boolean'
             | 'byte'
             | 'short'
             | 'int'
             | 'long'
             | 'float'
             | 'double'

IncDecOperator -> '++' | '--'
